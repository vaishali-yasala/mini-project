"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ArgCaptor_1 = require("./capture/ArgCaptor");
var AnyNumberMatcher_1 = require("./matcher/type/AnyNumberMatcher");
var AnyStringMatcher_1 = require("./matcher/type/AnyStringMatcher");
var AnythingMatcher_1 = require("./matcher/type/AnythingMatcher");
var BetweenMatcher_1 = require("./matcher/type/BetweenMatcher");
var DeepEqualMatcher_1 = require("./matcher/type/DeepEqualMatcher");
var NotNullMatcher_1 = require("./matcher/type/NotNullMatcher");
var StrictEqualMatcher_1 = require("./matcher/type/StrictEqualMatcher");
var MethodStubSetter_1 = require("./MethodStubSetter");
var MethodStubVerificator_1 = require("./MethodStubVerificator");
var MethodToStub_1 = require("./MethodToStub");
var Mock_1 = require("./Mock");
function mock(clazz) {
    return new Mock_1.Mocker(clazz).getMock();
}
exports.mock = mock;
function verify(method) {
    return new MethodStubVerificator_1.MethodStubVerificator(method);
}
exports.verify = verify;
function when(method) {
    return new MethodStubSetter_1.MethodStubSetter(method);
}
exports.when = when;
function instance(mock) {
    return mock.__tsmockitoInstance;
}
exports.instance = instance;
function capture(method) {
    var methodStub = method();
    if (methodStub instanceof MethodToStub_1.MethodToStub) {
        var actions = methodStub.mocker.getActionsByName(methodStub.name);
        return new ArgCaptor_1.ArgCaptor(actions);
    }
    else {
        throw Error("Cannot capture from not mocked object.");
    }
}
exports.capture = capture;
function reset(mock) {
    mock.__tsmockitoMocker.reset();
}
exports.reset = reset;
function resetCalls(mock) {
    mock.__tsmockitoMocker.resetCalls();
}
exports.resetCalls = resetCalls;
function anyNumber() {
    return new AnyNumberMatcher_1.AnyNumberMatcher();
}
exports.anyNumber = anyNumber;
function anyString() {
    return new AnyStringMatcher_1.AnyStringMatcher();
}
exports.anyString = anyString;
function anything() {
    return new AnythingMatcher_1.AnythingMatcher();
}
exports.anything = anything;
function between(min, max) {
    return new BetweenMatcher_1.BetweenMatcher(min, max);
}
exports.between = between;
function deepEqual(expectedValue) {
    return new DeepEqualMatcher_1.DeepEqualMatcher(expectedValue);
}
exports.deepEqual = deepEqual;
function notNull() {
    return new NotNullMatcher_1.NotNullMatcher();
}
exports.notNull = notNull;
function strictEqual(expectedValue) {
    return new StrictEqualMatcher_1.StrictEqualMatcher(expectedValue);
}
exports.strictEqual = strictEqual;
//# sourceMappingURL=ts-mockito.js.map