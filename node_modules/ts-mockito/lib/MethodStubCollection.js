"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MethodStubCollection = (function () {
    function MethodStubCollection() {
        this.items = [];
    }
    MethodStubCollection.prototype.add = function (item) {
        this.items.push(item);
    };
    MethodStubCollection.prototype.getLastMatchingGroupIndex = function (args) {
        for (var i = this.items.length - 1; i >= 0; i--) {
            var item = this.items[i];
            if (item.isApplicable(args)) {
                return item.getGroupIndex();
            }
        }
        return -1;
    };
    MethodStubCollection.prototype.getFirstMatchingFromGroupAndRemoveIfNotLast = function (groupIndex, args) {
        var index = this.getFirstMatchingIndexFromGroup(groupIndex, args);
        var result = this.getFirstMatchingFromGroup(groupIndex, args);
        if (index > -1 && this.getItemsCountInGroup(groupIndex) > 1) {
            this.items.splice(index, 1);
        }
        return result;
    };
    MethodStubCollection.prototype.getFirstMatchingFromGroup = function (groupIndex, args) {
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.getGroupIndex() === groupIndex && item.isApplicable(args)) {
                return item;
            }
        }
        return null;
    };
    MethodStubCollection.prototype.hasMatchingInAnyGroup = function (args) {
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.isApplicable(args)) {
                return true;
            }
        }
        return false;
    };
    MethodStubCollection.prototype.getFirstMatchingIndexFromGroup = function (groupIndex, args) {
        var index = 0;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.getGroupIndex() === groupIndex && item.isApplicable(args)) {
                return index;
            }
            index++;
        }
        return -1;
    };
    MethodStubCollection.prototype.getItemsCountInGroup = function (groupIndex) {
        var result = 0;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.getGroupIndex() === groupIndex) {
                result++;
            }
        }
        return result;
    };
    return MethodStubCollection;
}());
exports.MethodStubCollection = MethodStubCollection;
//# sourceMappingURL=MethodStubCollection.js.map