import { Matcher } from "./matcher/type/Matcher";
import { MethodAction } from "./MethodAction";
export declare class Mocker {
    private clazz;
    private methodStubCollections;
    private methodActions;
    private mock;
    private instance;
    private redundantMethodNameInCodeFinder;
    private subKeysInCodeFinder;
    constructor(clazz: any);
    getMock(): any;
    reset(): void;
    resetCalls(): void;
    getAllMatchingActions(methodName: string, matchers: Array<Matcher>): Array<MethodAction>;
    getFirstMatchingAction(methodName: string, matchers: Array<Matcher>): MethodAction;
    private createMethodStubsFromPrototypeOwnPropertyDescriptors(prototype?);
    private createMethodStubsFromPrototypeOwnPropertyNames(prototype?);
    private createMethodStubsFromPrototypeKeys();
    private createMethodStubsFromClassCode();
    private createMethodStubsFromFunctionsCode();
    private createPropertyStub(key);
    private createMethodStub(key);
    private createMethodToStub(key);
    private createInstanceActionListenersFromPrototypeOwnPropertyDescriptors(prototype?);
    private createInstancePropertyDescriptorListener(key);
    private createInstanceActionListenersFromPrototypeOwnPropertyNames(prototype?);
    private createInstanceActionListenersFromPrototypeKeys();
    private createInstanceActionListenersFromClassCode();
    private createInstanceActionListenersFromFunctionsCode();
    private createInstanceActionListener(key);
    private createActionListener(key);
    private getMethodStub(key, args);
    getActionsByName(name: string): MethodAction[];
}
